import "./chunk-GWBPVOL2.js";

// node_modules/network-latency/src/network.js
var image = new Image();
var tStart = null;
var tEnd = null;
var abortFallback = false;
var counter = 0;
var responseTimeArray = [];
var NO_RESPONSE_TIME = 1e5;
function checkConnectivity({ url = "https://www.google.com/images/phd/px.gif", timeToCount = 3, threshold = 2e3, interval = 3e4 } = {}) {
  if (navigator.onLine) {
    changeConnectivity(true);
  } else {
    timeoutFallback(threshold);
  }
  window.addEventListener("online", () => changeConnectivity(true));
  window.addEventListener("offline", () => timeoutFallback(threshold));
  timeoutFallback(threshold);
  checkLatency(url, timeToCount, (avg) => handleResult(avg, threshold));
  const intervalRef = setInterval(() => {
    reset();
    timeoutFallback(threshold);
    checkLatency(url, timeToCount, (avg) => handleResult(avg, threshold));
  }, interval);
  return function AbortCheckConnectivity() {
    clearInterval(intervalRef);
    reset();
  };
}
function reset() {
  responseTimeArray = [];
  counter = 0;
  abortFallback = false;
}
function handleResult(avg, threshold) {
  const isConnnectionFast = avg <= threshold;
  changeConnectivity(isConnnectionFast);
}
function checkLatency(url, timeToCount, cb) {
  tStart = Date.now();
  if (counter < timeToCount) {
    image.src = `${url}?t=${tStart}`;
    image.onload = function pingResult() {
      abortFallback = true;
      tEnd = Date.now();
      const time = tEnd - tStart;
      responseTimeArray.push(time);
      counter++;
      checkLatency(url, timeToCount, cb);
    };
    image.onerror = function erroPingResult() {
      abortFallback = true;
      responseTimeArray.push(NO_RESPONSE_TIME);
      counter++;
      checkLatency(url, timeToCount, cb);
    };
  } else {
    const sum = responseTimeArray.reduce((a, b) => a + b);
    const avg = sum / responseTimeArray.length;
    cb(avg);
  }
}
function changeConnectivity(state) {
  const event = new CustomEvent("connection-changed", {
    detail: state
  });
  document.dispatchEvent(event);
}
function timeoutFallback(threshold) {
  setTimeout(() => {
    if (!abortFallback) {
      console.warn("Connectivity is too slow, falling back to offline mode");
      changeConnectivity(false);
    }
  }, threshold + 1);
}

// node_modules/network-latency/src/index.js
var src_default = checkConnectivity;

// dep:network-latency
var network_latency_default = src_default;
export {
  network_latency_default as default
};
//# sourceMappingURL=network-latency.js.map
