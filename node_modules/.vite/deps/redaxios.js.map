{
  "version": 3,
  "sources": ["../../redaxios/src/index.js", "dep:redaxios"],
  "sourcesContent": ["/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @public\n * @typedef Options\n * @property {string} [url] the URL to request\n * @property {'get'|'post'|'put'|'patch'|'delete'|'options'|'head'|'GET'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'|'HEAD'} [method=\"get\"] HTTP method, case-insensitive\n * @property {Headers} [headers] Request headers\n * @property {FormData|string|object} [body] a body, optionally encoded, to send\n * @property {'text'|'json'|'stream'|'blob'|'arrayBuffer'|'formData'|'stream'} [responseType=\"json\"] An encoding to use for the response\n * @property {Record<string,any>|URLSearchParams} [params] querystring parameters\n * @property {(params: Options['params']) => string} [paramsSerializer] custom function to stringify querystring parameters\n * @property {boolean} [withCredentials] Send the request with credentials like cookies\n * @property {string} [auth] Authorization header value to send with the request\n * @property {string} [xsrfCookieName] Pass an Cross-site Request Forgery prevention cookie value as a header defined by `xsrfHeaderName`\n * @property {string} [xsrfHeaderName] The name of a header to use for passing XSRF cookies\n * @property {(status: number) => boolean} [validateStatus] Override status code handling (default: 200-399 is a success)\n * @property {Array<(body: any, headers: Headers) => any?>} [transformRequest] An array of transformations to apply to the outgoing request\n * @property {string} [baseURL] a base URL from which to resolve all URLs\n * @property {typeof window.fetch} [fetch] Custom window.fetch implementation\n * @property {any} [data]\n */\n\n/**\n * @public\n * @typedef Headers\n * @type {{[name: string]: string}}\n */\n\n/**\n * @public\n * @template T\n * @typedef Response\n * @property {number} status\n * @property {string} statusText\n * @property {Options} config the request configuration\n * @property {T} data the decoded response body\n * @property {Headers} headers\n * @property {boolean} redirect\n * @property {string} url\n * @property {ResponseType} type\n * @property {ReadableStream<Uint8Array> | null} body\n * @property {boolean} bodyUsed\n */\n\n/**\n * @typedef BodylessMethod\n * @type {<T=any>(url: string, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @typedef BodyMethod\n * @type {<T=any>(url: string, body?: any, config?: Options) => Promise<Response<T>>}\n */\n\n/** */\nexport default (function create(/** @type {Options} */ defaults) {\n\tdefaults = defaults || {};\n\n\t/**\n\t * @public\n\t * @template T\n\t * @type {(<T = any>(config?: Options) => Promise<Response<T>>) | (<T = any>(url: string, config?: Options) => Promise<Response<T>>)}\n\t */\n\tredaxios.request = redaxios;\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.get = (url, config) => redaxios(url, config, 'get');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.delete = (url, config) => redaxios(url, config, 'delete');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.head = (url, config) => redaxios(url, config, 'head');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.options = (url, config) => redaxios(url, config, 'options');\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.post = (url, data, config) => redaxios(url, config, 'post', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.put = (url, data, config) => redaxios(url, config, 'put', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.patch = (url, data, config) => redaxios(url, config, 'patch', data);\n\n\t/** @public */\n\tredaxios.all = Promise.all.bind(Promise);\n\n\t/**\n\t * @public\n\t * @template Args, R\n\t * @param {(...args: Args[]) => R} fn\n\t * @returns {(array: Args[]) => R}\n\t */\n\tredaxios.spread = function (fn) {\n\t\treturn function (results) {\n\t\t\treturn fn.apply(this, results);\n\t\t};\n\t};\n\t// 3b smaller:\n\t// redaxios.spread = (fn) => /** @type {any} */ (fn.apply.bind(fn, fn));\n\n\t/**\n\t * @private\n\t * @param {Record<string,any>} opts\n\t * @param {Record<string,any>} [overrides]\n\t * @param {boolean} [lowerCase]\n\t * @returns {Partial<opts>}\n\t */\n\tfunction deepMerge(opts, overrides, lowerCase) {\n\t\tlet out = {},\n\t\t\ti;\n\t\tif (Array.isArray(opts)) {\n\t\t\treturn opts.concat(overrides);\n\t\t}\n\t\tfor (i in opts) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tout[key] = opts[i];\n\t\t}\n\t\tfor (i in overrides) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tconst value = /** @type {any} */ (overrides)[i];\n\t\t\tout[key] = key in out && typeof value == 'object' ? deepMerge(out[key], value, key === 'headers') : value;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * Issues a request.\n\t * @public\n\t * @template T\n\t * @param {string | Options} url\n\t * @param {Options} [config]\n\t * @param {any} [_method]\n\t * @param {any} [_data]\n\t * @returns {Promise<Response<T>>}\n\t */\n\tfunction redaxios(url, config, _method, _data) {\n\t\tif (typeof url !== 'string') {\n\t\t\tconfig = url;\n\t\t\turl = config.url;\n\t\t}\n\n\t\tconst response = /** @type {Response<any>} */ ({ config });\n\n\t\t/** @type {Options} */\n\t\tconst options = deepMerge(defaults, config);\n\n\t\t/** @type {Headers} */\n\t\tconst customHeaders = {};\n\n\t\tlet data = _data || options.data;\n\n\t\t(options.transformRequest || []).map((f) => {\n\t\t\tdata = f(data, options.headers) || data;\n\t\t});\n\n\t\tif (data && typeof data === 'object' && typeof data.append !== 'function') {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tcustomHeaders['content-type'] = 'application/json';\n\t\t}\n\n\t\tconst m =\n\t\t\ttypeof document !== 'undefined' && document.cookie.match(RegExp('(^|; )' + options.xsrfCookieName + '=([^;]*)'));\n\t\tif (m) customHeaders[options.xsrfHeaderName] = m[2];\n\n\t\tif (options.auth) {\n\t\t\tcustomHeaders.authorization = options.auth;\n\t\t}\n\n\t\tif (options.baseURL) {\n\t\t\turl = url.replace(/^(?!.*\\/\\/)\\/?(.*)$/, options.baseURL + '/$1');\n\t\t}\n\n\t\tif (options.params) {\n\t\t\tconst divider = ~url.indexOf('?') ? '&' : '?';\n\t\t\tconst query = options.paramsSerializer\n\t\t\t\t? options.paramsSerializer(options.params)\n\t\t\t\t: new URLSearchParams(options.params);\n\t\t\turl += divider + query;\n\t\t}\n\n\t\tconst fetchFunc = options.fetch || fetch;\n\n\t\treturn fetchFunc(url, {\n\t\t\tmethod: _method || options.method,\n\t\t\tbody: data,\n\t\t\theaders: deepMerge(options.headers, customHeaders, true),\n\t\t\tcredentials: options.withCredentials ? 'include' : 'same-origin'\n\t\t}).then((res) => {\n\t\t\tfor (const i in res) {\n\t\t\t\tif (typeof res[i] != 'function') response[i] = res[i];\n\t\t\t}\n\n\t\t\tconst ok = options.validateStatus ? options.validateStatus(res.status) : res.ok;\n\n\t\t\tif (options.responseType == 'stream') {\n\t\t\t\tresponse.data = res.body;\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\treturn res[options.responseType || 'text']()\n\t\t\t\t.then((data) => {\n\t\t\t\t\tresponse.data = data;\n\t\t\t\t\t// its okay if this fails: response.data will be the unparsed value:\n\t\t\t\t\tresponse.data = JSON.parse(data);\n\t\t\t\t})\n\t\t\t\t.catch(Object)\n\t\t\t\t.then(() => (ok ? response : Promise.reject(response)));\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @type {AbortController}\n\t */\n\tredaxios.CancelToken = /** @type {any} */ (typeof AbortController == 'function' ? AbortController : Object);\n\n\t/**\n\t * @public\n\t * @type {Options}\n\t */\n\tredaxios.defaults = defaults;\n\n\t/**\n\t * @public\n\t */\n\tredaxios.create = create;\n\n\treturn redaxios;\n})();\n", "import d from \"./node_modules/redaxios/dist/redaxios.module.js\";export default d;"],
  "mappings": "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",
  "names": []
}
