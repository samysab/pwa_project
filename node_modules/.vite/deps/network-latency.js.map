{
  "version": 3,
  "sources": ["../../network-latency/src/network.js", "../../network-latency/src/index.js", "dep:network-latency"],
  "sourcesContent": ["/**\n * Check network latency\n * @author Syu93\n */\n\n/**\n * Handle check latency result.\n * @callback CheckLatencyCallback\n * @param {Number} avg The average response time\n */\n/**\n * Abort checkConnectivity.\n * @callback AbortCheckConnectivity\n */\n\nconst image = new Image();\nlet tStart = null;\nlet tEnd = null;\nlet abortFallback = false;\nlet counter = 0;\nlet responseTimeArray = [];\n\nconst NO_RESPONSE_TIME = 100000;\n\n/**\n * Check connectivity latency by loading an image as a ping HTTP request against provided URL\n * \n * @param {Object} config Configuration object\n * @param {string} config.url The URL of the ressource to ping\n * @param {Number} config.timeToCount The number of time to count for average\n * @param {Number} config.threshold The theashold limit of latency\n * @param {Number} config.interval The employee's department.\n * @returns {AbortCheckConnectivity} An abort method to cancle the ping intervals\n */\nexport default function checkConnectivity({ url = 'https://www.google.com/images/phd/px.gif', timeToCount = 3, threshold = 2000, interval = 30000 } = {}) {\n  // Check navigator onLine state to set the first connectivity status\n  if (navigator.onLine) {\n    changeConnectivity(true);\n  } else {\n    timeoutFallback(threshold);\n  }\n\n  // Listen for navigator online status change\n  window.addEventListener('online', () => changeConnectivity(true));\n  window.addEventListener('offline', () => timeoutFallback(threshold));\n\n\n  // Call our check for connectivity latency workflow\n  // We default fallback to offline\n  // If the avarage ping response times is under the threshold\n  // We abort the fallback to offline\n  timeoutFallback(threshold);\n  checkLatency(url, timeToCount, avg => handleResult(avg ,threshold));\n\n  // Repeat the operaction\n  const intervalRef = setInterval(() => {\n    reset();\n    timeoutFallback(threshold);\n    checkLatency(url, timeToCount, avg => handleResult(avg ,threshold));\n  }, interval);\n\n  return function AbortCheckConnectivity() {\n    clearInterval(intervalRef);\n    reset();\n  }\n}\n\n/**\n * Reset the responseTimeArray, the counter, and the abort flag\n */\nfunction reset() {\n  responseTimeArray = [];\n  counter = 0;\n  abortFallback = false;\n}\n\n/**\n * Handle the checkLatency result and compaare the average response time to the threshold\n * Use changeConnectivity to dispactch a connection changed event\n * @param {Number} avg The average response time\n * @param {Number} threshold The threshold limit \n */\nfunction handleResult(avg, threshold) {\n  const isConnnectionFast = avg <= threshold;\n  changeConnectivity(isConnnectionFast);\n}\n\n/**\n * Recursive function that load an image recursively a given number of time\n * To compute the average response time\n * @param {String} url The URL of the ressource to ping\n * @param {Number} timeToCount The number of time to count for average\n * @param {CheckLatencyCallback} cb A function to call after each ping cycle\n */\nfunction checkLatency(url, timeToCount, cb) {\n  tStart = Date.now();\n  if (counter < timeToCount) {\n    image.src = `${url}?t=${tStart}`;\n    image.onload = function pingResult() {\n      abortFallback = true;\n      tEnd = Date.now();\n      const time = tEnd - tStart;\n      responseTimeArray.push(time);\n      counter++;\n      checkLatency(url, timeToCount, cb);\n    }\n    image.onerror = function erroPingResult() {\n      abortFallback = true;\n      responseTimeArray.push(NO_RESPONSE_TIME);\n      counter++;\n      checkLatency(url, timeToCount, cb);\n    }\n  } else {\n    const sum = responseTimeArray.reduce((a, b) => a + b);\n    const avg = sum / responseTimeArray.length;\n    cb(avg);\n  }\n}\n\n/**\n * Dispatch a custom event 'connection-change' that indicate if latency is above the threshold or not\n * @param {Boolean} state A boolean value that represent the state of the connectivity regarding the threshold\n */\nfunction changeConnectivity(state) {\n  const event = new CustomEvent('connection-changed', {\n    detail: state\n  });\n  document.dispatchEvent(event);\n}\n\n/**\n * A fallcack handler the dispatch a connection change event that indicate that the latency is above the threshold\n * @param {Number} threshold A threshold limit to consider user offline\n */\nfunction timeoutFallback(threshold) {\n  setTimeout(() => {\n    if (!abortFallback) {\n      console.warn('Connectivity is too slow, falling back to offline mode');\n      changeConnectivity(false);\n    }\n  }, threshold +1);\n}\n", "import checkConnectivity from './network.js';\n\nexport default checkConnectivity;\n", "import d from \"./node_modules/network-latency/src/index.js\";export default d;"],
  "mappings": ";;;AAeA,IAAM,QAAQ,IAAI,MAAM;AACxB,IAAI,SAAS;AACb,IAAI,OAAO;AACX,IAAI,gBAAgB;AACpB,IAAI,UAAU;AACd,IAAI,oBAAoB,CAAC;AAEzB,IAAM,mBAAmB;AAYV,2BAA2B,EAAE,MAAM,4CAA4C,cAAc,GAAG,YAAY,KAAM,WAAW,QAAU,CAAC,GAAG;AAExJ,MAAI,UAAU,QAAQ;AACpB,uBAAmB,IAAI;AAAA,EACzB,OAAO;AACL,oBAAgB,SAAS;AAAA,EAC3B;AAGA,SAAO,iBAAiB,UAAU,MAAM,mBAAmB,IAAI,CAAC;AAChE,SAAO,iBAAiB,WAAW,MAAM,gBAAgB,SAAS,CAAC;AAOnE,kBAAgB,SAAS;AACzB,eAAa,KAAK,aAAa,SAAO,aAAa,KAAK,SAAS,CAAC;AAGlE,QAAM,cAAc,YAAY,MAAM;AACpC,UAAM;AACN,oBAAgB,SAAS;AACzB,iBAAa,KAAK,aAAa,SAAO,aAAa,KAAK,SAAS,CAAC;AAAA,EACpE,GAAG,QAAQ;AAEX,SAAO,kCAAkC;AACvC,kBAAc,WAAW;AACzB,UAAM;AAAA,EACR;AACF;AAKA,iBAAiB;AACf,sBAAoB,CAAC;AACrB,YAAU;AACV,kBAAgB;AAClB;AAQA,sBAAsB,KAAK,WAAW;AACpC,QAAM,oBAAoB,OAAO;AACjC,qBAAmB,iBAAiB;AACtC;AASA,sBAAsB,KAAK,aAAa,IAAI;AAC1C,WAAS,KAAK,IAAI;AAClB,MAAI,UAAU,aAAa;AACzB,UAAM,MAAM,GAAG,SAAS;AACxB,UAAM,SAAS,sBAAsB;AACnC,sBAAgB;AAChB,aAAO,KAAK,IAAI;AAChB,YAAM,OAAO,OAAO;AACpB,wBAAkB,KAAK,IAAI;AAC3B;AACA,mBAAa,KAAK,aAAa,EAAE;AAAA,IACnC;AACA,UAAM,UAAU,0BAA0B;AACxC,sBAAgB;AAChB,wBAAkB,KAAK,gBAAgB;AACvC;AACA,mBAAa,KAAK,aAAa,EAAE;AAAA,IACnC;AAAA,EACF,OAAO;AACL,UAAM,MAAM,kBAAkB,OAAO,CAAC,GAAG,MAAM,IAAI,CAAC;AACpD,UAAM,MAAM,MAAM,kBAAkB;AACpC,OAAG,GAAG;AAAA,EACR;AACF;AAMA,4BAA4B,OAAO;AACjC,QAAM,QAAQ,IAAI,YAAY,sBAAsB;AAAA,IAClD,QAAQ;AAAA,EACV,CAAC;AACD,WAAS,cAAc,KAAK;AAC9B;AAMA,yBAAyB,WAAW;AAClC,aAAW,MAAM;AACf,QAAI,CAAC,eAAe;AAClB,cAAQ,KAAK,wDAAwD;AACrE,yBAAmB,KAAK;AAAA,IAC1B;AAAA,EACF,GAAG,YAAW,CAAC;AACjB;;;AC3IA,IAAO,cAAQ;;;ACF6C,IAAO,0BAAQ;",
  "names": []
}
